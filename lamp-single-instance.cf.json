{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "LAMP single instance",
    "Parameters": {
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Name of existing EC2 KeyPair to enable SSH access",
            "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
        },
        "InstanceType": {
            "Type": "String",
            "Description": "WebServer EC2 instance type",
            "Default": "t2.micro",
            "AllowedValues": ["t2.micro", "t2.nano"],
            "ConstraintDescription": "Must be a valid EC2 instance type."
        },
        "SSHLocation": {
            "Type": "String",
            "Description": "The IP address rang that can be used to SSH from",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must enter a valid IP CIDR range of form x.x.x.x/x.",
            "Default": "144.138.55.43/32",
            "MinLength": 9,
            "MaxLength": 18
        },
        "DBName": {
            "Description": "MySQL database name",
            "Default": "MyDatabase",
            "Type": "String",
            "MinLength": 1,
            "MaxLength": 64,
            "NoEcho": false,
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "Must begin with a letter and contain only alphanumeric"
        },
        "DBUser": {
            "NoEcho": "false",
            "Description": "Username for MySql database access",
            "Type": "String",
            "MinLength": 1,
            "MaxLength": 16,
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "Must begin with a letter and contain only alphanumeric"
        },
        "DBPassword": {
            "NoEcho": true,
            "Description": "Password for MySQL database access",
            "Type": "String",
            "MinLength": 1,
            "MaxLength": 41,
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "Must contain only alphanumeric characters"
        },
        "DBRootPassword": {
            "NoEcho": true,
            "Description": "Root password for MySQL",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "Must contain only alphanumeric characters"
        }
    },
    "Mappings": {
        "AWSRegionArch2AMI": {
            "ap-southeast-2": {"PV64" : "ami-63351d00", "HVM64" : "ami-942dd1f6", "HVMG2" : "ami-85ef12e7"},
        },
        "AWSInstanceType2Arch": {
            "t2.nano"     : { "Arch" : "HVM64"  },
            "t2.micro"    : { "Arch" : "HVM64"  }
        }
    },
    "Resources": {
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80 + SSH",
                "SecurityGroupIngress": [
                    {"IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "CidrIp": "0.0.0.0/0"},
                    {"IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "CidrIp": "144.138.55.43/32"}
                ]
            }
        },
        "WebServerInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": [
                        "Install", "Configure"
                    ],

                    "Install": {
                        "packages": {
                            "yum": {
                                "mysql": [],
                                "mysql-server": [],
                                "mysql-libs": [],
                                "httpd": [],
                                "php": [],
                                "php-mysql": []
                            }
                        },
                        "files": {
                            "/var/www/html/index.php": {
                                "content": {"Fn::Join": ["", [
                                    "<html>\n",
                                    "  <head>\n",
                                    "    <title>AWS CloudFormation PHP Sample</title>\n",
                                    "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
                                    "  </head>\n",
                                    "  <body>\n",
                                    "    <h1>Welcome to the AWS CloudFormation PHP Sample</h1>\n",
                                    "    <p/>\n",
                                    "    <?php\n",
                                    "      // Print out the current data and time\n",
                                    "      print \"The Current Date and Time is: <br/>\";\n",
                                    "      print date(\"g:i A l, F j Y.\");\n",
                                    "    ?>\n",
                                    "    <p/>\n",
                                    "    <?php\n",
                                    "      // Setup a handle for CURL\n",
                                    "      $curl_handle=curl_init();\n",
                                    "      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n",
                                    "      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n",
                                    "      // Get the hostname of the intance from the instance metadata\n",
                                    "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');\n",
                                    "      $hostname = curl_exec($curl_handle);\n",
                                    "      if (empty($hostname))\n",
                                    "      {\n",
                                    "        print \"Sorry, for some reason, we got no hostname back <br />\";\n",
                                    "      }\n",
                                    "      else\n",
                                    "      {\n",
                                    "        print \"Server = \" . $hostname . \"<br />\";\n",
                                    "      }\n",
                                    "      // Get the instance-id of the intance from the instance metadata\n",
                                    "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n",
                                    "      $instanceid = curl_exec($curl_handle);\n",
                                    "      if (empty($instanceid))\n",
                                    "      {\n",
                                    "        print \"Sorry, for some reason, we got no instance id back <br />\";\n",
                                    "      }\n",
                                    "      else\n",
                                    "      {\n",
                                    "        print \"EC2 instance-id = \" . $instanceid . \"<br />\";\n",
                                    "      }\n",
                                    "      $Database   = \"localhost\";\n",
                                    "      $DBUser     = \"", {"Ref" : "DBUser"}, "\";\n",
                                    "      $DBPassword = \"", {"Ref" : "DBPassword"}, "\";\n",
                                    "      print \"Database = \" . $Database . \"<br />\";\n",
                                    "      $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)\n",
                                    "                      or die(\"Could not connect: \" . mysql_error());\n",
                                    "      print (\"Connected to $Database successfully\");\n",
                                    "      mysql_close($dbconnection);\n",
                                    "    ?>\n",
                                    "    <h2>PHP Information</h2>\n",
                                    "    <p/>\n",
                                    "    <?php\n",
                                    "      phpinfo();\n",
                                    "    ?>\n",
                                    "  </body>\n",
                                    "</html>\n"
                                ]]},
                                "mode": "000600",
                                "owner": "apache",
                                "group": "apache"
                            },
                            "/tmp/setup.mysql": {
                                "content": { "Fn::Join": ["", [
                                    "create database ", {"Ref": "DBName"}, "\n",
                                    "grant all on ", {"Ref": "DBName"}, ".* to '", {"Ref":"DBUser"} ,"'@localhost identified by '",{"Ref": "DBPassword"},"';\n"
                                ]]},
                                "mode": "00400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {"Fn::Join": ["", [
                                    "[main]\n",
                                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                    "region=", { "Ref" : "AWS::Region" }, "\n"
                                ]]},
                                "mode": "00400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {"Fn::Join": ["", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                                    "action=/opt/aws/bin/cfn-init -v ",
                                    "         --stack ", { "Ref" : "AWS::StackName" },
                                    "         --resource WebServerInstance ",
                                    "         --configsets InstallAndRun ",
                                    "         --region ", { "Ref" : "AWS::Region" }, "\n",
                                    "runas=root\n"
                                ]]},
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "mysqld": {
                                    "enabled": true,
                                    "ensureRunning": true
                                },
                                "httpd": {
                                    "enabled": true,
                                    "ensureRunning": true
                                },
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "Configure": {
                        "commands": {
                            "01_set_mysql_root_password": {
                                "command": {"Fn::Join": ["", [
                                    "mysqladmin -u root password '",{"Ref": "DBRootPassword"},"'"
                                ]]},
                                "test": {"Fn::Join": ["", [
                                    "$(mysql ", { "Ref" : "DBName" }, " -u root --password='", { "Ref" : "DBRootPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"
                                ]]}
                            },
                            "02_create_database": {
                                "command": {"Fn::Join": ["", [
                                    "mysql -u root --password='", { "Ref" : "DBRootPassword" }, "' < /tmp/setup.mysql"
                                ]]},
                                "test": {"Fn::Join": ["", [
                                    "$(mysql ", { "Ref" : "DBName" }, " -u root --password='", { "Ref" : "DBRootPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"
                                ]]}
                            }
                        }

                    }
                }
            },
            "Properties": {
                "ImageId": {"Fn::FindInMap": ["AWSRegionArch2AMI", {"Ref": "AWS::Region"}, {"Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref": "InstanceType"}, "Arch"]}]},
                "InstanceType": {"Ref": "InstanceType"},
                "SecurityGroups": [{"Ref": "WebServerSecurityGroup"}],
                "KeyName": {"Ref": "KeyName"},
                "UserData": {
                    "Fn::Base64": { "Fn::Join": ["", [
                        "#!/bin/bash -xe\n",
                        "yum update -y aws-cfn-bootstrap\n",
                        
                        "# Install the files and packages from the metadata\n",
                        "/opt/aws/bin/cfn-init -v ",
                        "   --stack ", {"Ref": "AWS::StackName"},
                        "   --resource WebServerInstrance ",
                        "   --configsets InstallAndRun ",
                        "   --region ", {"Ref": "AWS::Region"}, "\n",
                        
                        "# Signal the status from cfn-init\n",
                        "/opt/aws/bin/cfn-signal -e $? ",
                        "   --stack ", {"Ref": "AWS::StackName"},
                        "   --resource WebServerInstance ",
                        "   --region ", {"Ref": "AWS::Region"}, "\n"
                    ]]}
                }
            }
        }
    },
    "Outputs": {
        "WebsiteURL": {
            "Description": "URL for newly created LAMP stack",
            "Value": {"Fn::Join": ["", [
                "http://",
                {"Fn::GetAtt": ["WebServerInstance", "PublicDnsName"]}
            ]]}
        }
    }
}